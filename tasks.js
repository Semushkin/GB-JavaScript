/*
1. Дан код:
    var a = 1, b = 1, c, d;
    c = ++a; alert(c);           // 2
    d = b++; alert(d);           // 1
    c = (2+ ++a); alert(c);      // 5
    d = (2+ b++); alert(d);      // 4
    alert(a);                    // 3
    alert(b);                    // 3
Почему код даёт именно такие результаты?
*/

var a = 1, b = 1, c, d;
c = ++a; alert(c);            // 2 - Присваивание переменной "с" значение переменной "а" увеличенной на едениницу инкрементом.
d = b++; alert(d);            // 1 - Знак инкремента стоит после переменной, всвязи с чем переменной "d" присваивается значение перменной "b" до увеличения на еденицу.
c = (2 + ++a); alert(c);      // 5 - Выражение плюсует 2 с переменной "а" со знаком инкремента, при этом переменная "а" уже была увеличена на еденицу еще в первом выражении.
d = (2 + b++); alert(d);      // 4 - Выражение похоже на предыдущее, но знак инкремента стоит после переменной "b", следованиетльно используется значение "b" до увеличения на еденицу.
// при этом, оно уже было увеличено на еденицу во втором выражении.
alert(a);                     // 3 - Изначальное значение переменной "а" равное еденице было увеличено на еденицу инкрементом в первом выражении и еще раз в третьем выражении.
alert(b);                     // 3 - Изначальное значение переменной "b" равное еденице было увеличено на еденицу инкрементов во вторм и четвертом выражении.

/*
2. Чему будет равен x в примере ниже?
    var a = 2;
    var x = 1 + (a *= 2);
*/

// Результат выражения "5". Переменной "а" призваивается значение самой себя умноженной на 2, и к полученному результату прибавляется единица.

/*
3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. 
Затем написать скрипт, который работает по следующему принципу:
    если a и b положительные, вывести их разность;
    если а и b отрицательные, вывести их произведение;
    если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.
*/

let a = 0, b = 1;


if (a >= 0 & b >= 0) {
    console.log(a - b);
}
else if (a < 0 & b < 0) {
    console.log(a - b);
}
else {
    console.log(a + b);
}

/*
4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.
*/

let a = Math.random() * 16;
a = Math.round(a);
console.log(`Переменной "а" присвоено значение ${a}`)
check(a)

function check(a) {
    switch (a) {
        case 1: console.log(1);
        case 2: console.log(2);
        case 3: console.log(3);
        case 4: console.log(4);
        case 5: console.log(5);
        case 6: console.log(6);
        case 7: console.log(7);
        case 8: console.log(8);
        case 9: console.log(9);
        case 10: console.log(10);
        case 11: console.log(11);
        case 12: console.log(12);
        case 13: console.log(13);
        case 14: console.log(14);
        case 15: console.log(15);
    }
}

/*
5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.
*/

function plus(x, y) {
    return x + y;
}

function minus(x, y) {
    return x - y;
}

function multiplication(x, y) {
    return x * y;
}

function spliting(x, y) {
    return x / y;
}


/*
6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, 
operation – строка с названием операции. 
В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 5) 
и вернуть полученное значение (использовать switch).
*/

function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case "плюс": return arg1 + arg2;
        case "минус": return arg1 - arg2;
        case "умножить": return arg1 * arg2;
        case "разделить": return arg1 / arg2;
    }
}

/*
7. *Сравнить null и 0. Попробуйте объяснить результат.
*/



/*
8. *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.
*/

function power(val, pow) {
    if (pow > 1) {
        return power(val ** 2, --pow);
    }
    else {
        return val
    }
}